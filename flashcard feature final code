START OF FILE ONE
//main.cpp

#include <SFML/Graphics.hpp>
#include "flashcardmanager.h"
#include "MainMenu.h"
#include <iostream>

int main() {
	// Create the main window
    sf::RenderWindow window(sf::VideoMode(1920, 1080), "SFML Flashcard App");

    // Load welcome background
    sf::Texture menuTexture;
    if (!menuTexture.loadFromFile("welcomepage.png")) {
        std::cerr << "Failed to load background!\n";
        return -1;
    }
    sf::Sprite menuBackground(menuTexture);

	// Create the main menu
    MainMenu menu(window.getSize().x, window.getSize().y);
    
    bool inMenu = true;


	// Main menu loop
    while (window.isOpen() && inMenu) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            // Check mouse click
            if (event.type == sf::Event::MouseButtonPressed && event.mouseButton.button == sf::Mouse::Left) {
                sf::Vector2i mousePos = sf::Mouse::getPosition(window);

                // Define the clickable button area - first option START
                sf::IntRect startButtonArea(1200, 910, 500, 100); // x, y, width, height

                // Define the clickable button area - second option REVIEW
                sf::IntRect ReviewButtonArea(46, 200, 593, 198); // x, y, width, height

                if (startButtonArea.contains(mousePos)) {
                    inMenu = false; // Proceed to flashcards
                }
                else if (ReviewButtonArea.contains(mousePos)) {
                    inMenu = false;
                }
            }
        }

        window.clear();
        window.draw(menuBackground);
        window.display();
    }

    // Load flashcards
    FlashcardManager manager;
    if (!manager.loadFromFile("programming.txt")) {
        std::cerr << "Failed to load flashcards.\n";
        return -1;
    }

    // Load font
    sf::Font font;
    if (!font.loadFromFile("arial.ttf")) {
        std::cerr << "Failed to load font.\n";
        return -1;
    }

    // Load flashcard background
    sf::Texture backgroundTexture;
    if (!backgroundTexture.loadFromFile("flashcardbackground.png")) {
        std::cerr << "Failed to load background texture.\n";
        return -1;
    }
    sf::Sprite backgroundSprite(backgroundTexture);

    // Setup texts
    sf::Text cardText("", font, 24);
    cardText.setFillColor(sf::Color::White);
    cardText.setPosition(550, 250);

    sf::Text inputText("", font, 20);
    inputText.setFillColor(sf::Color::Black);
    inputText.setPosition(520, 830);

    sf::Text feedbackText("", font, 20);
    feedbackText.setFillColor(sf::Color::Blue);
    feedbackText.setPosition(520, 950);

    int currentCard = 0;
    bool showingQuestion = true;
    bool quizMode = false;
    std::string userInput;

    // Flashcard loop
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            if (event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::Tab) {
                    quizMode = !quizMode;
                    userInput.clear();
                    feedbackText.setString("");
                }
                else if (!quizMode) {
                    if (event.key.code == sf::Keyboard::Space) {
                        showingQuestion = !showingQuestion;
                    }
                    else if (event.key.code == sf::Keyboard::Right) {
                        currentCard = (currentCard + 1) % manager.getCards().size();
                        showingQuestion = true;
                    }
                    else if (event.key.code == sf::Keyboard::Left) {
                        currentCard = (currentCard - 1 + manager.getCards().size()) % manager.getCards().size();
                        showingQuestion = true;
                    }
                }
                else {
                    if (event.key.code == sf::Keyboard::Enter) {
                        std::string correct = manager.getCards()[currentCard].getAnswer();
                        if (userInput == correct) {
                            feedbackText.setString("Correct!");
                        }
                        else {
                            feedbackText.setString("The Correct Answer is: " + correct);
                        }
                        userInput.clear();
                    }
                    else if (event.key.code == sf::Keyboard::BackSpace && !userInput.empty()) {
                        userInput.pop_back();
                    }
                }
            }

            if (quizMode && event.type == sf::Event::TextEntered) {
                if (event.text.unicode < 128 && event.text.unicode != '\b' && event.text.unicode != '\r') {
                    userInput += static_cast<char>(event.text.unicode);
                }
            }
        }

        // Update card text
        std::string displayText = quizMode ? manager.getCards()[currentCard].getQuestion() :
            (showingQuestion ? manager.getCards()[currentCard].getQuestion()
                : manager.getCards()[currentCard].getAnswer());

        cardText.setString(displayText);
        inputText.setString("Your answer: " + userInput);

        window.clear();
        window.draw(backgroundSprite);
        window.draw(cardText);
        window.draw(inputText);
        window.draw(feedbackText);
        window.display();
    }
  
    return 0;
}




START OF FILE TWO 

//MainMenu.h
#pragma once
// MainMenu.h
#ifndef MAINMENU_H
#define MAINMENU_H

#include <SFML/Graphics.hpp>

class MainMenu {
public:
    MainMenu(float width, float height);
    void draw(sf::RenderWindow& window);
    void MoveUp();
    void MoveDown();
    int GetPressedItem() const;

private:
    int selectedItemIndex;
    sf::Font font;
    sf::Text menu[3]; // example with 3 menu items
};

#endif

START OF FILE THREE

// MainMenu.cpp
#include "MainMenu.h"

MainMenu::MainMenu(float width, float height) {
    if (!font.loadFromFile("arial.ttf")) {
        // Handle error
    }

    std::string items[] = { "Start", "Options", "Exit" };

    for (int i = 0; i < 3; ++i) {
        menu[i].setFont(font);
        menu[i].setFillColor(i == 0 ? sf::Color::Red : sf::Color::White);
        menu[i].setString(items[i]);
        menu[i].setPosition(sf::Vector2f(width / 2, height / (4 + i)));
    }

    selectedItemIndex = 0;
}

void MainMenu::draw(sf::RenderWindow& window) {
    for (const auto& item : menu) {
        window.draw(item);
    }
}

void MainMenu::MoveUp() {
    if (selectedItemIndex - 1 >= 0) {
        menu[selectedItemIndex].setFillColor(sf::Color::White);
        selectedItemIndex--;
        menu[selectedItemIndex].setFillColor(sf::Color::Red);
    }
}

void MainMenu::MoveDown() {
    if (selectedItemIndex + 1 < 3) {
        menu[selectedItemIndex].setFillColor(sf::Color::White);
        selectedItemIndex++;
        menu[selectedItemIndex].setFillColor(sf::Color::Red);
    }
}

int MainMenu::GetPressedItem() const {
    return selectedItemIndex;
}

START OF FILE FOUR 
#ifndef FLASHCARDMANAGER_H
#define FLASHCARDMANAGER_H

#include <vector>
#include "flashcard.h"

// FlashcardManager class is responsible for managing a collection of flashcards.
// This demonstrates the OOP principle of RESPONSIBILITY: a class has a clear, focused role.
class FlashcardManager {
private:
    // ENCAPSULATION: The flashcard collection is private to protect internal data
    std::vector<Flashcard> cards;

public:
    // Adds a new flashcard to the collection
    // Shows ABSTRACTION: caller doesn't need to know how cards are stored
    void addFlashcard(const Flashcard& card);

    // Starts a quiz session with the user using stored flashcards
    // ABSTRACTION: hides quiz logic details behind a simple interface
    void quizUser() const;

    // Loads flashcards from a file and populates the collection
    // ABSTRACTION + RESPONSIBILITY: separates file-handling from main program logic
    bool loadFromFile(const std::string& filename);
    
    // Provides read-only access to the stored flashcards
    // This controlled access is a key part of ENCAPSULATION
    const std::vector<Flashcard>& getCards() const;
};

#endif


